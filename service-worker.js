/* eslint-disable */

// Set this to true for production
const doCache = false;
// if (window.location.hostname === 'localhost') {
//   doCache = false;
// }

// Name our cache
const CACHE_NAME = 'sandbox-commerce';

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
  if (doCache) {
    // console.log('true in caching');
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function(cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch('asset-manifest.json')
            .then(response => {
              // console.log('RESPONSE: ' + JSON.stringify(response));
              return response.json()
            })
            .then(assets => {
              // Open a cache and cache our files
              // We want to cache the page and the bundle.js generated by webpack
              // We could also cache any static assets like CSS or images

              // console.log('ASSETS: ' + JSON.stringify(assets));

              const urlsToCache = [
                "/",
                "/index.html"
              ]
              // console.log('cached');
              return cache.addAll(urlsToCache)
            })
        })
        .then(function() {
          return self.skipWaiting();
        })
    );
  }
});

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys()
      .then(keyList =>
        Promise.all(keyList.map(key => {
          // console.log('key: ' + key)
          if (!cacheWhitelist.includes(key)) {
            // console.log('Deleting cache: ' + key)
            return caches.delete(key);
          }
        }))
      )
  );
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event) {
  const { request } = event;
  if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
    return;
  } else {
    if (doCache) {
      event.respondWith(
        caches.match(event.request).then(function (response) {
          return response || fetch(event.request);
        })
      );
    } else {
      return;
    }
  }
});

// assets["main.js"]
